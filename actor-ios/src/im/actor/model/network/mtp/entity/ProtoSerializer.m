//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/network/mtp/entity/ProtoSerializer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/network/mtp/entity/Container.h"
#include "im/actor/model/network/mtp/entity/Drop.h"
#include "im/actor/model/network/mtp/entity/MTPush.h"
#include "im/actor/model/network/mtp/entity/MTRpcRequest.h"
#include "im/actor/model/network/mtp/entity/MTRpcResponse.h"
#include "im/actor/model/network/mtp/entity/MessageAck.h"
#include "im/actor/model/network/mtp/entity/NewSessionCreated.h"
#include "im/actor/model/network/mtp/entity/Ping.h"
#include "im/actor/model/network/mtp/entity/Pong.h"
#include "im/actor/model/network/mtp/entity/ProtoSerializer.h"
#include "im/actor/model/network/mtp/entity/ProtoStruct.h"
#include "im/actor/model/network/mtp/entity/RequestResend.h"
#include "im/actor/model/network/mtp/entity/UnsentMessage.h"
#include "im/actor/model/network/mtp/entity/UnsentResponse.h"
#include "im/actor/model/network/mtp/entity/rpc/Push.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcError.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcFloodWait.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcInternalError.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcOk.h"
#include "im/actor/model/util/StreamingUtils.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"

@implementation MTProtoSerializer

+ (MTProtoStruct *)readMessagePayloadWithByteArray:(IOSByteArray *)bs {
  return MTProtoSerializer_readMessagePayloadWithByteArray_(bs);
}

+ (MTProtoStruct *)readMessagePayloadWithJavaIoInputStream:(JavaIoInputStream *)bs {
  return MTProtoSerializer_readMessagePayloadWithJavaIoInputStream_(bs);
}

+ (MTProtoStruct *)readRpcResponsePayloadWithByteArray:(IOSByteArray *)bs {
  return MTProtoSerializer_readRpcResponsePayloadWithByteArray_(bs);
}

+ (MTProtoStruct *)readRpcResponsePayloadWithJavaIoInputStream:(JavaIoInputStream *)bs {
  return MTProtoSerializer_readRpcResponsePayloadWithJavaIoInputStream_(bs);
}

+ (MTPush *)readUpdateWithByteArray:(IOSByteArray *)bs {
  return MTProtoSerializer_readUpdateWithByteArray_(bs);
}

+ (MTPush *)readUpdateWithJavaIoInputStream:(JavaIoInputStream *)bs {
  return MTProtoSerializer_readUpdateWithJavaIoInputStream_(bs);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readMessagePayloadWithByteArray:", "readMessagePayload", "Lim.actor.model.network.mtp.entity.ProtoStruct;", 0x9, "Ljava.io.IOException;" },
    { "readMessagePayloadWithJavaIoInputStream:", "readMessagePayload", "Lim.actor.model.network.mtp.entity.ProtoStruct;", 0x9, "Ljava.io.IOException;" },
    { "readRpcResponsePayloadWithByteArray:", "readRpcResponsePayload", "Lim.actor.model.network.mtp.entity.ProtoStruct;", 0x9, "Ljava.io.IOException;" },
    { "readRpcResponsePayloadWithJavaIoInputStream:", "readRpcResponsePayload", "Lim.actor.model.network.mtp.entity.ProtoStruct;", 0x9, "Ljava.io.IOException;" },
    { "readUpdateWithByteArray:", "readUpdate", "Lim.actor.model.network.mtp.entity.rpc.Push;", 0x9, "Ljava.io.IOException;" },
    { "readUpdateWithJavaIoInputStream:", "readUpdate", "Lim.actor.model.network.mtp.entity.rpc.Push;", 0x9, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _MTProtoSerializer = { 1, "ProtoSerializer", "im.actor.model.network.mtp.entity", NULL, 0x1, 7, methods, 0, NULL, 0, NULL};
  return &_MTProtoSerializer;
}

@end

MTProtoStruct *MTProtoSerializer_readMessagePayloadWithByteArray_(IOSByteArray *bs) {
  MTProtoSerializer_init();
  return MTProtoSerializer_readMessagePayloadWithJavaIoInputStream_([[[JavaIoByteArrayInputStream alloc] initWithByteArray:bs] autorelease]);
}

MTProtoStruct *MTProtoSerializer_readMessagePayloadWithJavaIoInputStream_(JavaIoInputStream *bs) {
  MTProtoSerializer_init();
  jbyte header = AMStreamingUtils_readByteWithJavaIoInputStream_(bs);
  switch (header) {
    case MTPing_HEADER:
    return [[[MTPing alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTPong_HEADER:
    return [[[MTPong alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTDrop_HEADER:
    return [[[MTDrop alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTContainer_HEADER:
    return [[[MTContainer alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTMTRpcRequest_HEADER:
    return [[[MTMTRpcRequest alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTMTRpcResponse_HEADER:
    return [[[MTMTRpcResponse alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTMessageAck_HEADER:
    return [[[MTMessageAck alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTNewSessionCreated_HEADER:
    return [[[MTNewSessionCreated alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTMTPush_HEADER:
    return [[[MTMTPush alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTUnsentMessage_HEADER:
    return [[[MTUnsentMessage alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTUnsentResponse_HEADER:
    return [[[MTUnsentResponse alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTRequestResend_HEADER:
    return [[[MTUnsentResponse alloc] initWithJavaIoInputStream:bs] autorelease];
  }
  @throw [[[JavaIoIOException alloc] initWithNSString:JreStrcat("$B", @"Unable to read proto object with header #", header)] autorelease];
}

MTProtoStruct *MTProtoSerializer_readRpcResponsePayloadWithByteArray_(IOSByteArray *bs) {
  MTProtoSerializer_init();
  return MTProtoSerializer_readRpcResponsePayloadWithJavaIoInputStream_([[[JavaIoByteArrayInputStream alloc] initWithByteArray:bs] autorelease]);
}

MTProtoStruct *MTProtoSerializer_readRpcResponsePayloadWithJavaIoInputStream_(JavaIoInputStream *bs) {
  MTProtoSerializer_init();
  jbyte header = AMStreamingUtils_readByteWithJavaIoInputStream_(bs);
  switch (header) {
    case MTRpcOk_HEADER:
    return [[[MTRpcOk alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTRpcError_HEADER:
    return [[[MTRpcError alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTRpcFloodWait_HEADER:
    return [[[MTRpcFloodWait alloc] initWithJavaIoInputStream:bs] autorelease];
    case MTRpcInternalError_HEADER:
    return [[[MTRpcInternalError alloc] initWithJavaIoInputStream:bs] autorelease];
  }
  @throw [[[JavaIoIOException alloc] initWithNSString:@"Unable to read proto object"] autorelease];
}

MTPush *MTProtoSerializer_readUpdateWithByteArray_(IOSByteArray *bs) {
  MTProtoSerializer_init();
  return MTProtoSerializer_readUpdateWithJavaIoInputStream_([[[JavaIoByteArrayInputStream alloc] initWithByteArray:bs] autorelease]);
}

MTPush *MTProtoSerializer_readUpdateWithJavaIoInputStream_(JavaIoInputStream *bs) {
  MTProtoSerializer_init();
  return [[[MTPush alloc] initWithJavaIoInputStream:bs] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MTProtoSerializer)
