//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/jvm/actors/JavaThreadsDispatcher.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/actors/ActorTime.h"
#include "im/actor/model/droidkit/actors/ThreadPriority.h"
#include "im/actor/model/droidkit/actors/dispatch/AbstractDispatchQueue.h"
#include "im/actor/model/droidkit/actors/dispatch/Dispatch.h"
#include "im/actor/model/droidkit/actors/dispatch/DispatchResult.h"
#include "im/actor/model/jvm/actors/JavaThreadsDispatcher.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface ImActorModelJvmActorsJavaThreadsDispatcher () {
 @public
  IOSObjectArray *threads_;
  jint count_;
  ImActorModelDroidkitActorsThreadPriorityEnum *priority_;
  jboolean isClosed_;
  jint id__;
  NSString *name_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelJvmActorsJavaThreadsDispatcher, threads_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ImActorModelJvmActorsJavaThreadsDispatcher, priority_, ImActorModelDroidkitActorsThreadPriorityEnum *)
J2OBJC_FIELD_SETTER(ImActorModelJvmActorsJavaThreadsDispatcher, name_, NSString *)

@interface ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread () {
 @public
  ImActorModelJvmActorsJavaThreadsDispatcher *this$0_;
  jboolean isChanged__;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread, this$0_, ImActorModelJvmActorsJavaThreadsDispatcher *)

BOOL ImActorModelJvmActorsJavaThreadsDispatcher_initialized = NO;

@implementation ImActorModelJvmActorsJavaThreadsDispatcher

JavaUtilConcurrentAtomicAtomicInteger * ImActorModelJvmActorsJavaThreadsDispatcher_INDEX_;

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)count
withImActorModelDroidkitActorsThreadPriorityEnum:(ImActorModelDroidkitActorsThreadPriorityEnum *)priority
withImActorModelDroidkitActorsDispatchAbstractDispatchQueue:(ImActorModelDroidkitActorsDispatchAbstractDispatchQueue *)queue
withImActorModelDroidkitActorsDispatchDispatch:(id<ImActorModelDroidkitActorsDispatchDispatch>)dispatch
                     withBoolean:(jboolean)createThreads {
  if (self = [super initWithImActorModelDroidkitActorsDispatchAbstractDispatchQueue:queue withImActorModelDroidkitActorsDispatchDispatch:dispatch]) {
    isClosed_ = NO;
    self->id__ = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(ImActorModelJvmActorsJavaThreadsDispatcher_INDEX_)) getAndIncrement];
    self->name_ = name;
    self->count_ = count;
    self->priority_ = priority;
    if (createThreads) {
      [self startPool];
    }
  }
  return self;
}

- (void)startPool {
  if (self->threads_ != nil) {
    return;
  }
  self->threads_ = [IOSObjectArray newArrayWithLength:count_ type:JavaLangThread_class_()];
  for (jint i = 0; i < count_; i++) {
    IOSObjectArray_SetAndConsume(self->threads_, i, [[ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread alloc] initWithImActorModelJvmActorsJavaThreadsDispatcher:self]);
    [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setNameWithNSString:JreStrcat("$$CI", @"Pool_", name_, '_', i)];
    switch ([priority_ ordinal]) {
      case ImActorModelDroidkitActorsThreadPriority_HIGH:
      [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setPriorityWithInt:JavaLangThread_MAX_PRIORITY];
      break;
      case ImActorModelDroidkitActorsThreadPriority_LOW:
      [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setPriorityWithInt:JavaLangThread_MIN_PRIORITY];
      break;
      default:
      case ImActorModelDroidkitActorsThreadPriority_NORMAL:
      [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
      break;
    }
    [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) start];
  }
}

- (void)close {
  isClosed_ = YES;
  [self notifyDispatcher];
}

- (void)notifyDispatcher {
  if (threads_ != nil) {
    @synchronized(threads_) {
      [threads_ notifyAll];
      {
        IOSObjectArray *a__ = threads_;
        JavaLangThread * const *b__ = a__->buffer_;
        JavaLangThread * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaLangThread *thread = *b__++;
          [((ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread *) nil_chk(((ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread *) check_class_cast(thread, [ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread class])))) setChangedWithBoolean:YES];
        }
      }
    }
  }
}

- (void)copyAllFieldsTo:(ImActorModelJvmActorsJavaThreadsDispatcher *)other {
  [super copyAllFieldsTo:other];
  other->threads_ = threads_;
  other->count_ = count_;
  other->priority_ = priority_;
  other->isClosed_ = isClosed_;
  other->id__ = id__;
  other->name_ = name_;
}

+ (void)initialize {
  if (self == [ImActorModelJvmActorsJavaThreadsDispatcher class]) {
    ImActorModelJvmActorsJavaThreadsDispatcher_INDEX_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:1];
    J2OBJC_SET_INITIALIZED(ImActorModelJvmActorsJavaThreadsDispatcher)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withImActorModelDroidkitActorsThreadPriorityEnum:withImActorModelDroidkitActorsDispatchAbstractDispatchQueue:withImActorModelDroidkitActorsDispatchDispatch:withBoolean:", "JavaThreadsDispatcher", NULL, 0x1, NULL },
    { "startPool", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "notifyDispatcher", NULL, "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INDEX_", NULL, 0x1a, "Ljava.util.concurrent.atomic.AtomicInteger;", &ImActorModelJvmActorsJavaThreadsDispatcher_INDEX_,  },
    { "threads_", NULL, 0x2, "[Ljava.lang.Thread;", NULL,  },
    { "count_", NULL, 0x12, "I", NULL,  },
    { "priority_", NULL, 0x12, "Lim.actor.model.droidkit.actors.ThreadPriority;", NULL,  },
    { "isClosed_", NULL, 0x2, "Z", NULL,  },
    { "id__", "id", 0x12, "I", NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static const char *superclass_type_args[] = {"TT;", "TQ;"};
  static const J2ObjcClassInfo _ImActorModelJvmActorsJavaThreadsDispatcher = { 1, "JavaThreadsDispatcher", "im.actor.model.jvm.actors", NULL, 0x1, 4, methods, 7, fields, 2, superclass_type_args};
  return &_ImActorModelJvmActorsJavaThreadsDispatcher;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelJvmActorsJavaThreadsDispatcher)

@implementation ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread

- (jboolean)isChanged {
  return isChanged__;
}

- (void)setChangedWithBoolean:(jboolean)isChanged {
  self->isChanged__ = isChanged;
}

- (void)run {
  while (!this$0_->isClosed_) {
    jlong time = ImActorModelDroidkitActorsActorTime_currentTime();
    @synchronized(this$0_->threads_) {
      isChanged__ = NO;
    }
    ImActorModelDroidkitActorsDispatchDispatchResult *action = [((ImActorModelDroidkitActorsDispatchAbstractDispatchQueue *) nil_chk([this$0_ getQueue])) dispatchWithLong:time];
    if (![((ImActorModelDroidkitActorsDispatchDispatchResult *) nil_chk(action)) isResult]) {
      if (isChanged__) {
        continue;
      }
      @synchronized(this$0_->threads_) {
        jlong delay = [action getDelay];
        [action recycle];
        @try {
          if (delay > 0) {
            [((IOSObjectArray *) nil_chk(this$0_->threads_)) waitWithLong:delay];
          }
          continue;
        }
        @catch (JavaLangInterruptedException *e) {
          [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
          return;
        }
      }
    }
    @try {
      id actiondData = (id) [action getRes];
      [action recycle];
      [this$0_ dispatchMessageWithId:actiondData];
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
    }
  }
}

- (instancetype)initWithImActorModelJvmActorsJavaThreadsDispatcher:(ImActorModelJvmActorsJavaThreadsDispatcher *)outer$ {
  this$0_ = outer$;
  if (self = [super init]) {
    isChanged__ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->isChanged__ = isChanged__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isChanged", NULL, "Z", 0x1, NULL },
    { "setChangedWithBoolean:", "setChanged", "V", 0x1, NULL },
    { "run", NULL, "V", 0x1, NULL },
    { "initWithImActorModelJvmActorsJavaThreadsDispatcher:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.model.jvm.actors.JavaThreadsDispatcher;", NULL,  },
    { "isChanged__", "isChanged", 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread = { 1, "DispatcherThread", "im.actor.model.jvm.actors", "JavaThreadsDispatcher", 0x2, 4, methods, 2, fields, 0, NULL};
  return &_ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelJvmActorsJavaThreadsDispatcher_DispatcherThread)
