//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/Messenger.java
//

#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/Messenger.h"
#include "im/actor/model/State.h"
#include "im/actor/model/concurrency/Command.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/modules/Auth.h"
#include "im/actor/model/modules/Messages.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/Presence.h"
#include "im/actor/model/modules/Typing.h"
#include "im/actor/model/modules/Users.h"
#include "im/actor/model/mvvm/KeyValueEngine.h"
#include "im/actor/model/mvvm/ListEngine.h"

@interface AMMessenger () {
 @public
  ImActorModelModulesModules *modules_;
}
@end

J2OBJC_FIELD_SETTER(AMMessenger, modules_, ImActorModelModulesModules *)

@implementation AMMessenger

- (instancetype)initWithAMConfiguration:(AMConfiguration *)configuration {
  if (self = [super init]) {
    self->modules_ = [[ImActorModelModulesModules alloc] initWithAMConfiguration:configuration];
  }
  return self;
}

- (AMStateEnum *)getState {
  return [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) getState];
}

- (jboolean)isLoggedIn {
  return [self getState] == AMStateEnum_get_LOGGED_IN();
}

- (id<ImActorModelConcurrencyCommand>)requestSmsWithLong:(jlong)phone {
  return [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) requestSmsWithLong:phone];
}

- (id<ImActorModelConcurrencyCommand>)sendCodeWithInt:(jint)code {
  return [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) sendCodeWithInt:code];
}

- (id<ImActorModelConcurrencyCommand>)signUpWithNSString:(NSString *)firstName
                                            withNSString:(NSString *)avatarPath
                                             withBoolean:(jboolean)isSilent {
  return [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) signUpWithNSString:firstName withNSString:avatarPath withBoolean:isSilent];
}

- (jlong)getAuthPhone {
  return [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) getPhone];
}

- (void)resetAuth {
  [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) resetAuth];
}

- (jint)myUid {
  return [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) myUid];
}

- (id<ImActorModelMvvmKeyValueEngine>)getUsers {
  return [((ImActorModelModulesUsers *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getUsersModule])) getUsers];
}

- (id<ImActorModelMvvmListEngine>)getDialogs {
  return [((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getMessagesModule])) getDialogsEngine];
}

- (id<ImActorModelMvvmListEngine>)getMessagesWithImActorModelEntityPeer:(ImActorModelEntityPeer *)peer {
  return [((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getMessagesModule])) getConversationEngineWithImActorModelEntityPeer:peer];
}

- (void)onAppVisible {
  if ([((ImActorModelModulesModules *) nil_chk(modules_)) getPresenceModule] != nil) {
    [((ImActorModelModulesPresence *) nil_chk([modules_ getPresenceModule])) onAppVisible];
  }
}

- (void)onAppHidden {
  if ([((ImActorModelModulesModules *) nil_chk(modules_)) getPresenceModule] != nil) {
    [((ImActorModelModulesPresence *) nil_chk([modules_ getPresenceModule])) onAppHidden];
  }
}

- (void)onConversationOpenWithImActorModelEntityPeer:(ImActorModelEntityPeer *)peer {
  [((ImActorModelModulesPresence *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getPresenceModule])) onConversationOpenWithImActorModelEntityPeer:peer];
}

- (void)onConversationClosedWithImActorModelEntityPeer:(ImActorModelEntityPeer *)peer {
  [((ImActorModelModulesPresence *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getPresenceModule])) onConversationClosedWithImActorModelEntityPeer:peer];
}

- (void)onTypingWithImActorModelEntityPeer:(ImActorModelEntityPeer *)peer {
  [((ImActorModelModulesTyping *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getTypingModule])) onTypingWithImActorModelEntityPeer:peer];
}

- (void)saveDraftWithImActorModelEntityPeer:(ImActorModelEntityPeer *)peer
                               withNSString:(NSString *)draft {
  [((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getMessagesModule])) saveDraftWithImActorModelEntityPeer:peer withNSString:draft];
}

- (NSString *)loadDraftWithImActorModelEntityPeer:(ImActorModelEntityPeer *)peer {
  return [((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getMessagesModule])) loadDraftWithImActorModelEntityPeer:peer];
}

- (id<ImActorModelConcurrencyCommand>)editMyNameWithNSString:(NSString *)newName {
  return [((ImActorModelModulesUsers *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getUsersModule])) editMyNameWithNSString:newName];
}

- (id<ImActorModelConcurrencyCommand>)editNameWithInt:(jint)uid
                                         withNSString:(NSString *)name {
  return [((ImActorModelModulesUsers *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getUsersModule])) editNameWithInt:uid withNSString:name];
}

- (void)copyAllFieldsTo:(AMMessenger *)other {
  [super copyAllFieldsTo:other];
  other->modules_ = modules_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAMConfiguration:", "Messenger", NULL, 0x1, NULL },
    { "getState", NULL, "Lim.actor.model.State;", 0x1, NULL },
    { "isLoggedIn", NULL, "Z", 0x1, NULL },
    { "requestSmsWithLong:", "requestSms", "Lim.actor.model.concurrency.Command;", 0x1, NULL },
    { "sendCodeWithInt:", "sendCode", "Lim.actor.model.concurrency.Command;", 0x1, NULL },
    { "signUpWithNSString:withNSString:withBoolean:", "signUp", "Lim.actor.model.concurrency.Command;", 0x1, NULL },
    { "getAuthPhone", NULL, "J", 0x1, NULL },
    { "resetAuth", NULL, "V", 0x1, NULL },
    { "myUid", NULL, "I", 0x1, NULL },
    { "getUsers", NULL, "Lim.actor.model.mvvm.KeyValueEngine;", 0x1, NULL },
    { "getDialogs", NULL, "Lim.actor.model.mvvm.ListEngine;", 0x1, NULL },
    { "getMessagesWithImActorModelEntityPeer:", "getMessages", "Lim.actor.model.mvvm.ListEngine;", 0x1, NULL },
    { "onAppVisible", NULL, "V", 0x1, NULL },
    { "onAppHidden", NULL, "V", 0x1, NULL },
    { "onConversationOpenWithImActorModelEntityPeer:", "onConversationOpen", "V", 0x1, NULL },
    { "onConversationClosedWithImActorModelEntityPeer:", "onConversationClosed", "V", 0x1, NULL },
    { "onTypingWithImActorModelEntityPeer:", "onTyping", "V", 0x1, NULL },
    { "saveDraftWithImActorModelEntityPeer:withNSString:", "saveDraft", "V", 0x1, NULL },
    { "loadDraftWithImActorModelEntityPeer:", "loadDraft", "Ljava.lang.String;", 0x1, NULL },
    { "editMyNameWithNSString:", "editMyName", "Lim.actor.model.concurrency.Command;", 0x1, NULL },
    { "editNameWithInt:withNSString:", "editName", "Lim.actor.model.concurrency.Command;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "modules_", NULL, 0x2, "Lim.actor.model.modules.Modules;", NULL,  },
  };
  static const J2ObjcClassInfo _AMMessenger = { 1, "Messenger", "im.actor.model", NULL, 0x1, 21, methods, 1, fields, 0, NULL};
  return &_AMMessenger;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMMessenger)
